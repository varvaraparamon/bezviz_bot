from aiogram import Bot, Dispatcher, Router
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
import asyncio
import os
from dotenv import load_dotenv
from db import DB

load_dotenv()

bot = Bot(token=os.environ.get('TOKEN'))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)

db = DB()

registered_employees = {}  # {user_id: place_id}
pending_orders = {}  # {order_id: order_info}

@router.message(Command('start'))
async def start(message: Message):
    builder = ReplyKeyboardBuilder()
    builder.button(text="üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
    
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏!\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫:",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )

@router.message(lambda message: message.text == "üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
async def register_handler(message: Message):
    await message.answer(
        "üîê –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ ID –º–µ—Å—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>/register ID_–º–µ—Å—Ç–∞</code>\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>/register 1</code>",
        parse_mode="HTML"
    )

@router.message(Command('register'))
async def register(message: Message):
    args = message.text.split()[1] if len(message.text.split()) > 1 else None
    
    if not args:
        await message.answer(
            "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω ID –º–µ—Å—Ç–∞\n"
            "–§–æ—Ä–º–∞—Ç: <code>/register ID_–º–µ—Å—Ç–∞</code>\n"
            "–ü—Ä–∏–º–µ—Ä: <code>/register 1</code>",
            parse_mode="HTML"
        )
        return
    
    try:
        place_id = int(args.strip())
        
        if place_id <= 0:
            raise ValueError("ID –º–µ—Å—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
            
        registered_employees[message.from_user.id] = place_id
        await message.answer(
            f"‚úÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n"
            f"–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –º–µ—Å—Ç–∞ —Å ID: <code>{place_id}</code>\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö.",
            parse_mode="HTML"
        )
        
    except ValueError as e:
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</b>\n"
            f"{str(e)}\n\n"
            f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: <code>/register ID_–º–µ—Å—Ç–∞</code>\n"
            f"–ü—Ä–∏–º–µ—Ä: <code>/register 1</code>",
            parse_mode="HTML"
        )

async def handle_new_order(order_info):
    if not order_info:
        return
        
    place_id = order_info.get('place_id')
    order_id = order_info.get('order_id')
    product_name = order_info.get('name')
    
    if not all([place_id, order_id, product_name]):
        return
    
    pending_orders[order_id] = order_info
    
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{order_id}")
    builder.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{order_id}")
    
    for user_id, emp_place_id in registered_employees.items():
        if emp_place_id == place_id:
            try:
                await bot.send_message(
                    user_id,
                    f"üì¶ <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!</b>\n"
                    f"‚îú ID –∑–∞–∫–∞–∑–∞: <code>{order_id}</code>\n"
                    f"‚îú –¢–æ–≤–∞—Ä: {product_name}\n"
                    f"‚îî –ú–µ—Å—Ç–æ: <code>{place_id}</code>\n\n"
                    f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    parse_mode="HTML",
                    reply_markup=builder.as_markup()
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

@router.callback_query(lambda c: c.data.startswith('approve_'))
async def approve_order(callback: CallbackQuery):
    order_id = callback.data.split('_')[1]
    order_info = pending_orders.get(order_id)
    
    if not order_info:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    try:
        pending_orders.pop(order_id, None)
        await db.update_order_status(order_id, "success")
        
        await callback.message.edit_text(
            f"‚úÖ <b>–ó–∞–∫–∞–∑ –æ–¥–æ–±—Ä–µ–Ω</b>\n"
            f"‚îú ID: <code>{order_id[:8]}...</code>\n"
            f"‚îî –¢–æ–≤–∞—Ä: {order_info['name']}",
            parse_mode="HTML"
        )
        await callback.answer()
        
    except Exception as e:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏", show_alert=True)
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ {order_id}: {e}")

@router.callback_query(lambda c: c.data.startswith('reject_'))
async def reject_order(callback: CallbackQuery):
    order_id = callback.data.split('_')[1]
    order_info = pending_orders.get(order_id)
    
    if not order_info:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    try:
        pending_orders.pop(order_id, None)
        user_id = await db.get_order_user_id(order_id)
        refund_amount = await db.get_order_price(order_id)
        
        if not user_id:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞")
        
        await db.update_order_status(order_id, "cancel")
        await db.refund_user_coins(user_id, refund_amount)
        
        await callback.message.edit_text(
            f"‚ùå <b>–ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω—ë–Ω</b>\n"
            f"‚îú ID: <code>{order_id[:8]}...</code>\n"
            f"‚îú –¢–æ–≤–∞—Ä: {order_info['name']}\n"
            f"‚îî –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ: <code>{refund_amount}</code> coins",
            parse_mode="HTML"
        )
        await callback.answer()
        
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏: {str(e)}", show_alert=True)
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ {order_id}: {e}")

async def run_db_listener():
    await db.initialize()
    await db.watch_new_order_items(handle_new_order)

async def on_startup():
    asyncio.create_task(run_db_listener())

async def main():
    await on_startup()
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())